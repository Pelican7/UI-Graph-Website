<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Quick Start</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="f3a32709-3893-456c-bacb-eefc866ae301" /><meta name="Description" content="This Quick Start guide will quickly introduce you to the key concepts and workflows of UI Graph." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">UI Graph Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/da67a984-ce1f-4eba-b408-db4260a8bfa1.htm" title="UI Graph Documentation" tocid="roottoc">UI Graph Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/d6f9deb2-0be1-4787-9188-01d81be916a9.htm" title="Manual" tocid="d6f9deb2-0be1-4787-9188-01d81be916a9">Manual</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/f3a32709-3893-456c-bacb-eefc866ae301.htm" title="Guides" tocid="fd742639-ca0b-43cd-b57d-43c48005b70a">Guides</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/f3a32709-3893-456c-bacb-eefc866ae301.htm" title="Quick Start" tocid="f3a32709-3893-456c-bacb-eefc866ae301">Quick Start</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Help.png" /></td><td class="titleColumn"><h1>Quick Start</h1></td></tr></table><span class="introStyle"></span> <div class="introduction"><p>
        This Quick Start guide will quickly introduce you to the key concepts and workflows of UI Graph.
      </p><p>
        We will first create a simple user-interface consisting of two screens that can be transitioned between. We will then add a <a href="f37d9045-7720-41dc-87fd-a33317d40bbd.htm">Tab Bar Canvas Controller</a> and a third screen to demonstrate a <a href="0bc1dca5-7599-497f-880e-63c622949fef.htm#ContainerViewControllers">Container View Controller</a>, as shown in the video below. All of this will be done without writing a line of code.
      </p><p><center><video src="../media/Manual/Guides/Quick Start/QS-Final.mp4" type="video/mp4" width="100%" controls="" /></center></p><p>Contents</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#Installation">Installation</a></li><li class="outlineSectionEntry"><a href="#CreateASimpleUser-Interface">Create A Simple User-Interface</a></li><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#Introduction">Introduction</a></li><li class="outlineSectionEntry"><a href="#CreateTheCanvasControllers">Create The Canvas Controllers</a></li><li class="outlineSectionEntry"><a href="#CreateTheGraph">Create The Graph</a></li><li class="outlineSectionEntry"><a href="#PresentTheGraph">Present The Graph</a></li><li class="outlineSectionEntry"><a href="#AddATabBarContainer">Add A Tab Bar Container (Optional)</a></li><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#IntroductionTBC">Introduction</a></li><li class="outlineSectionEntry"><a href="#CreateTheCanvasControllersTBC">Create The Canvas Controllers</a></li><li class="outlineSectionEntry"><a href="#AddToGraph">Add To Graph</a></li></ul></ul></ul></div><div class="collapsibleAreaRegion" id="Installation"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Installation</span></div><div id="ID0RBSection" class="collapsibleSection"><p>Upon successfully importing the UI Graph package to your project, you will see the following message in the console.</p><p><em>
            Default UI Graph assets have been generated for your project and can be found in the folder 'Assets\UI Graph\Project Settings (User)'.
          </em></p><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
            By default, the standard <a href="07381161-0f92-62ad-dac0-870e4fe24869.htm">TabBarCanvasController</a> and <a href="9defded8-84b9-51f0-1b5b-4f5f10508fba.htm">NavigationCanvasController</a> container view controllers use Unity's Text Mesh Pro package to render text. If this is not already installed in your project, install it via the Unity Package Manager. If you are using an alternative text rendering system, you are not required to install Text Mesh Pro and can modify the relevant view controllers to use your text system, if necessary.
          </p></td></tr></table></div></div><div class="collapsibleAreaRegion" id="CreateASimpleUser-Interface"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Create A Simple User-Interface</span></div><div id="ID1RBSection" class="collapsibleSection"><h4 class="subHeading" id="Introduction">Introduction</h4><div class="subsection"><p>
              The core building block of UI Graph is the <a href="0bc1dca5-7599-497f-880e-63c622949fef.htm">View Controller</a>. A view controller manages a single view of content in your user-interface. This view can be a whole screen or a smaller section of a screen.
            </p><p>
              We will be using a specific type of view controller for working with Unity's UI Canvas, called a <a href="828d88a0-bf53-47a4-b1fc-884b090f5004.htm">Canvas Controller</a>. This is known in UI Graph as the UI Canvas workflow.
            </p></div><h4 class="subHeading" id="CreateTheCanvasControllers">Create The Canvas Controllers</h4><div class="subsection"><p>
              To begin, let's create a simple user-interface consisting of two screens – a blue screen and an orange screen. Create two canvas controllers, one for each screen, by selecting <span class="input">Create/UI Graph/UI Canvas/Canvas Controller</span> from the menu.
            </p><div class="mediaNear"><img alt="QS-CreateCC" src="../media/QS-CreateCC.png" /></div><p>
              Once completed you'll have two canvas controllers in your project, as below.
            </p><div class="mediaNear"><img alt="QS-CreatedCC" src="../media/QS-CreatedCC.PNG" /></div><p>
              A canvas controller consists of three assets in the Project inspector – the canvas controller asset itself, a script, and a view prefab. Open the blue canvas controller's view prefab to begin editing it. This will open the view in Prefab Mode and allow you to add your screen's UI components. Below we have added a background image, a title label, and a button, which will be used to present the orange canvas controller when pressed.
            </p><div class="mediaNear"><img alt="QS-Layout Blue" src="../media/QS-LayoutBlue.PNG" /></div><p>
              Do a similar thing for the orange canvas controller, this time adding a button to be used for dismissal.
            </p><div class="mediaNear"><img alt="QS-Layout Orange" src="../media/QS-LayoutOrange.PNG" /></div><p>
              That completes the creation of our canvas controllers. The next step is to create a Graph to represent the flow of our interface.
            </p></div><h4 class="subHeading" id="CreateTheGraph">Create The Graph</h4><div class="subsection"><p>
              Graphs enable you to build the flow of your user-interface in a visual, node-based editor. We will use a graph to construct the flow of our two screens. To create a graph, select <span class="input">Create/UI Graph/Graph</span> from the Unity menu. This will create a new graph asset at the selected location.
            </p><p>
              Double-click the newly created graph to open it in the graph editor. To add our view controllers to the graph, first drag the blue canvas controller asset (not the script or the view prefab) onto the graph editor. Do the same for the orange canvas controller and your graph will now contain both canvas controllers.
            </p><div class="mediaNear"><img alt="QS-Graph Added" src="../media/QS-GraphAdded.png" /></div><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
                Notice that the BlueCanvasController node has an arrow on the left pointing towards it. This signifies that it is the graph's <a href="824e6fef-eac9-4214-a9a1-6401321acde2.htm#InitialViewController">initial view controller</a>. If you added the OrangeCanvasController first, simply right-click on the BlueCanvasController node in the graph editor and select <span class="input">Make Initial</span>.
              </p></td></tr></table></div><p>
              We want to create transitions between our canvas controllers using the buttons that we placed in their views. When the blue screen's "Show Orange" button is pressed, we would like to present the orange screen. And when the orange screen's "Done" button is pressed, we would like to dismiss it. Therefore, we need to expose these buttons to the graph editor. This can be achieved by right-clicking on each view controller node in the editor and selecting <span class="input">Make All View Elements Graphable</span>.
            </p><div class="mediaNear"><img alt="QS-Graph Expose" src="../media/QS-GraphExpose.png" /></div><p>
              When completed, each view's buttons will be visible in the graph editor, as shown below.
            </p><div class="mediaNear"><img alt="QS-Graph Exposed" src="../media/QS-GraphExposed.png" /></div><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
                The <span class="input">Make All View Elements Graphable</span> option searches the view for all known graphable types and adds the relevant graphable components to them. You may add these components manually in the view, as well as create your own to expose your own custom types in the graph editor. See <a href="824e6fef-eac9-4214-a9a1-6401321acde2.htm#GraphableViewObjects">Graphs</a> for more information.
              </p></td></tr></table></div><p>
              We can now connect our canvas controllers. <span class="input">Click and drag</span> from the <span class="input">On Click</span> port of the BlueCanvasController's <span class="input">Show Orange Button</span> to the OrangeCanvasController.
            </p><div class="mediaNear"><img alt="QS-Graph Connect" src="../media/QS-GraphConnect.png" /></div><p>
              This will present you with a list of all the transitions available between these view controllers, which in this case is a single entry – <span class="input">Present --&gt; Orange Canvas Controller</span>. Select this option to create a presentation transition from this button to the OrangeCanvasController.
            </p><div class="mediaNear"><img alt="QS-Graph Connecting" src="../media/QS-GraphConnecting.png" /></div><p>
              Perform a similar process to connect the <span class="input">On Click</span> port of the OrangeCanvasController's <span class="input">Done Button</span> to the BlueCanvasController. This time you will be offered the <span class="input">Dismiss To --&gt; Blue Canvas Controller</span> transition. Select it to create a dismissal transition from this button back to the BlueCanvasController. This will give you a graph as shown below.
            </p><div class="mediaNear"><img alt="QS-Graph Connected" src="../media/QS-GraphConnected.png" /></div><p>
              The graph is now complete. The final step is to present our graph.
            </p></div><h4 class="subHeading" id="PresentTheGraph">Present The Graph</h4><div class="subsection"><p>
              Canvas controllers are presented within a <a href="828d88a0-bf53-47a4-b1fc-884b090f5004.htm#CanvasWindow">Canvas Window</a> component, which is placed within the scene. To present a graph, its initial view controller is instantiated and added to a window.
            </p><p>
              To present our graph, select the <span class="input">Options</span> menu in the top-right of the graph editor and choose <span class="input">Add Graph To Current Scene</span>.
            </p><div class="mediaNear"><img alt="QS-Graph Add To Scene" src="../media/QS-GraphAddToScene.png" /></div><p>
              This will add the required components to the scene for us, including a <a href="828d88a0-bf53-47a4-b1fc-884b090f5004.htm#CanvasWindow">Canvas Window</a>. By default, the <a href="8a559ce1-8b7d-a0c1-e527-502107009d0a.htm">CanvasGraphPresenter</a> component will present the graph upon Awake.
            </p><div class="mediaNear"><img alt="QS-Graph In Scene" src="../media/QS-GraphInScene.png" /></div><p>
              Hit <span class="input">Play</span> in the Unity editor to see our user-interface in action. Selecting <span class="input">SHOW THE ORANGE SCREEN</span> will present the orange screen. Selecting <span class="input">DONE</span> will dismiss back to the blue screen. The transitions will be animated using the default animators.
            </p><div class="mediaNear"><img alt="QS-Play Blue" src="../media/QS-PlayBlue.png" /></div><div class="mediaNear"><img alt="QS-Play Orange" src="../media/QS-PlayOrange.png" /></div></div><h4 class="subHeading" id="AddATabBarContainer">Add A Tab Bar Container (Optional)</h4><div class="subsection"><h4 class="subHeading" id="IntroductionTBC">Introduction</h4><div class="subsection"><p>
                  As mentioned earlier, view controllers can also represent a smaller section of a screen. This is because view controllers can embed child view controllers, enabling composite screens consisting of several view controllers' views to be created. A view controller that embeds, or contains, child view controllers is referred to as a <a href="0bc1dca5-7599-497f-880e-63c622949fef.htm#ContainerViewControllers">Container View Controller</a>. UI Graph offers several standard <a href="0bc1dca5-7599-497f-880e-63c622949fef.htm#ContainerViewControllers">Container View Controllers</a> designed to provide common user-interface layouts. One such container is the <a href="f37d9045-7720-41dc-87fd-a33317d40bbd.htm">Tab Bar Canvas Controller</a>.
                </p><p>
                  The <a href="f37d9045-7720-41dc-87fd-a33317d40bbd.htm">Tab Bar Canvas Controller</a> is a container view controller designed for switching between content screens with a tab bar interface. It manages a list of content view controllers and offers transitions, in addition to a tab bar interface, for switching between the currently selected/visible view controller.
                </p></div><h4 class="subHeading" id="CreateTheCanvasControllersTBC">Create The Canvas Controllers</h4><div class="subsection"><p>
                  We will add our blue canvas controller and a new, yellow canvas controller to a tab bar controller. This will embed our blue and yellow screens in a parent tab bar controller and allow us to switch between them using its tab bar interface. Additionally, the Blue --&gt; Orange presentation that we created previously will be maintained.
                </p><p>
                  Begin by creating a third, yellow canvas controller in the same way that we created the blue and orange screens previously.
                </p><div class="mediaNear"><img alt="QS-Create Yellow" src="../media/QS-CreateYellow.png" /></div><p>
                  Next, create a new <strong>Tab Bar Canvas Controller</strong> by selecting <span class="input">Create/UI Graph/UI Canvas/Tab Bar Canvas Controller</span> from the Unity menu. This will create an asset instance of the <strong>Tab Bar Canvas Controller</strong> and a view prefab at the selected location. The tab bar controller's view can be edited like any other canvas controller by opening its view prefab. For now, we have simply increased the height of the tab bar slightly for demonstration purposes.
                </p><div class="mediaNear"><img alt="QS-CreateTBC" src="../media/QS-CreateTBC.png" /></div></div><h4 class="subHeading" id="AddToGraph">Add To Graph</h4><div class="subsection"><p>
                  Add both the tab bar and yellow canvas controllers to the graph by dragging them onto the graph editor. Now, we want to make the tab bar controller our graph's initial view controller and add the blue and yellow canvas controllers to the tab bar's list of view controllers. To do this, right-click on the TabBarCanvasController node and select <span class="input">Make Initial</span>. Then, connect the <span class="input">View Controllers</span> port of the TabBarCanvasController node to the BlueCanvasController and YellowCanvasController nodes. This will add them to the tab bar controller's list of View Controllers. This will give you a graph configured as shown below.
                </p><div class="mediaNear"><img alt="QS-Graph Complete" src="../media/QS-GraphComplete.png" /></div><p>
                  Hit <span class="input">Play</span> in the Unity editor to see our modified user-interface in action. Selecting a tab bar item switches between the blue and yellow canvas controllers. Notice that these canvas controllers are embedded within the parent tab bar controller. Selecting <span class="input">SHOW THE ORANGE SCREEN</span> will still present the orange screen. Notice that this is presented on top of the whole tab bar controller. Selecting <span class="input">DONE</span> will dismiss back to the blue screen as before. The transitions will be animated using the default animators.
                </p><div class="mediaNear"><img alt="QS-TBCPlay 1" src="../media/QS-TBCPlay1.png" /></div><div class="mediaNear"><img alt="QS-TBCPlay 2" src="../media/QS-TBCPlay2.png" /></div><div class="mediaNear"><img alt="QS-TBCPlay 3" src="../media/QS-TBCPlay3.png" /></div><p>
                  That completes the Quick Start guide. You may wish to explore the package's <span class="nolink">demo projects</span> for further reference and examples.
                </p></div></div></div></div></div><div id="pageFooter" class="pageFooter"><p>© 2019 Pelican 7 LTD. All rights reserved.</p></div><!-- Google Analytics -->
<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-57773606-5', 'auto');
ga('send', 'pageview');
</script>
<!-- End Google Analytics --></body></html>