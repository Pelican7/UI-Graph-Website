<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Custom Graphable View Components</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="52555bb8-a232-4eea-9657-8213c344150a" /><meta name="Description" content="Objects in a view controller's view can be made to be graphable. When a view object is graphable it is exposed in the graph editor, allowing connections to be made from it." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">UI Graph Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/da67a984-ce1f-4eba-b408-db4260a8bfa1.htm" title="UI Graph Documentation" tocid="roottoc">UI Graph Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/d6f9deb2-0be1-4787-9188-01d81be916a9.htm" title="Manual" tocid="d6f9deb2-0be1-4787-9188-01d81be916a9">Manual</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/824e6fef-eac9-4214-a9a1-6401321acde2.htm" title="Graphs" tocid="824e6fef-eac9-4214-a9a1-6401321acde2">Graphs</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/52555bb8-a232-4eea-9657-8213c344150a.htm" title="UI Canvas" tocid="9b03a15d-6e51-4bdf-8cc8-6023e15e532f">UI Canvas</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/52555bb8-a232-4eea-9657-8213c344150a.htm" title="Custom Graphable View Components" tocid="52555bb8-a232-4eea-9657-8213c344150a">Custom Graphable View Components</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Help.png" /></td><td class="titleColumn"><h1>Custom Graphable View Components</h1></td></tr></table><span class="introStyle"></span> <div class="introduction"><p>Contents</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#Overview">Overview</a></li><li class="outlineSectionEntry"><a href="#Creation">Creation</a></li><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#CreateAGraphableTransitionViewComponentSubclass">Create A GraphableTransitionViewComponent Subclass</a></li><li class="outlineSectionEntry"><a href="#Triggers">Create Triggers</a></li><li class="outlineSectionEntry"><a href="#BindToTarget">Bind To Target</a></li><li class="outlineSectionEntry"><a href="#AddToView">Add To View</a></li></ul></ul></div><div class="collapsibleAreaRegion" id="Overview"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Overview</span></div><div id="ID0RBSection" class="collapsibleSection"><p>
          Objects in a view controller's view can be made to be graphable. When a view object is graphable it is exposed in the graph editor, allowing connections to be made from it.
        </p><p>
          By default UI Graph supports making <a href="https://docs.unity3d.com/Manual/script-Button.html" target="_blank">UnityEngine.UI.Button</a> and <a href="https://docs.unity3d.com/Manual/script-Toggle.html" target="_blank">UnityEngine.UI.Toggle</a> components graphable by adding a <a href="4e16539a-79c4-ea7c-de4a-917eaa35d3e8.htm">GraphableButtonComponent</a> or a <a href="d8cbbac9-4f54-a3bb-9de7-400f5b5b41e6.htm">GraphableToggleComponent</a> to them respectively. Custom components can be written to expose additional view object types to graphing. This is done by creating a <a href="d2023c1e-ea82-7924-20dc-3955d3a9fa36.htm">GraphableTransitionViewComponent<span id="LST74395C20_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST74395C20_0?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST74395C20_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST74395C20_1?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.
        </p><p>
          For example, the <strong>Chirp</strong> demo has a <span class="code">ListView</span> component that dynamically instantiates a list of items. Each item in the list can be selected. A <a href="d2023c1e-ea82-7924-20dc-3955d3a9fa36.htm">GraphableTransitionViewComponent<span id="LST74395C20_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST74395C20_2?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST74395C20_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST74395C20_3?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a> was created for the list view to expose an <strong>On Item Selected</strong> port in the graph editor. This allows the list view to be configured to perform a transition upon item selection.
        </p><div class="mediaNear"><img alt="List View Port" src="../media/List View Port.png" /><div class="caption">The list view exposes an On Item Selected port in the graph editor.</div></div></div><div class="collapsibleAreaRegion" id="Creation"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Creation</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
          To make a custom view component graphable, a graphable transition component is created for it. Graphable transition components define triggers, such as "On Click" or "Switch Off". These triggers are exposed to the graph editor. It is the graphable transition component's responsibility to activate its triggers as appropriate. Activating a trigger will cause the associated graph transition to be performed. For example, the <a href="4e16539a-79c4-ea7c-de4a-917eaa35d3e8.htm">GraphableButtonComponent</a> exposes a single trigger, "On Click". When the button is clicked it activates its "On Click" trigger.
        </p><p>
          To create a graphable transition component, follow the steps below.
        </p><h4 class="subHeading" id="CreateAGraphableTransitionViewComponentSubclass">Create A GraphableTransitionViewComponent Subclass</h4><div class="subsection"><p>
              Begin by creating a <a href="d2023c1e-ea82-7924-20dc-3955d3a9fa36.htm">GraphableTransitionViewComponent<span id="LST74395C20_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST74395C20_4?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST74395C20_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST74395C20_5?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a> subclass. Use the class's generic argument to supply the type of your target – the type of the component you wish to make graphable.
            </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAAADABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAADABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAAADABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAADABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> GraphableButtonComponent : GraphableTransitionViewComponent&lt;UnityEngine.UI.Button&gt;
{
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAADABAAA");</script></div><h4 class="subHeading" id="Triggers">Create Triggers</h4><div class="subsection"><p>
              Next, we need to specify the component's triggers. These are the ports that will be exposed in the graph editor. It is recommended to define these in the <span class="code">Reset</span> method, which will be called on creation in the editor only.
            </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAAACABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAACABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAAACABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAACABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> GraphableButtonComponent : GraphableTransitionViewComponent&lt;UnityEngine.UI.Button&gt;
{
    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Reset()
    {
        <span class="highlight-keyword">base</span>.Reset();

        <span class="highlight-comment">// Provide a single trigger for when the button is clicked.</span>
        triggers = <span class="highlight-keyword">new</span> GraphableTransitionViewObjectTrigger[]
        {
            <span class="highlight-keyword">new</span> GraphableTransitionViewObjectTrigger(<span class="highlight-literal">"On Click"</span>)
        };
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAACABAAA");</script></div><h4 class="subHeading" id="BindToTarget">Bind To Target</h4><div class="subsection"><p>
              Next, we need to implement the <a href="48a97225-1a5f-c5fe-2eb8-4aa024c35b29.htm">BindToTarget<span id="LST74395C20_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST74395C20_6?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a> method. This method will be called by UI Graph when the view is instantiated from a Graph. In it, you are responsible for binding to the target object and subsequently activating the relevant trigger at the appropriate time.
            </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAAABABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAABABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAAABABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAABABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> GraphableButtonComponent : GraphableTransitionViewComponent&lt;UnityEngine.UI.Button&gt;
{
    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> BindToTarget()
    {
        <span class="highlight-comment">// Bind port activation to the button's onClick callback.</span>
        target.onClick.AddListener(() =&gt;
        {
            Activate(triggers[<span class="highlight-number">0</span>]);
        });
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Reset()
    {
        <span class="highlight-keyword">base</span>.Reset();

        <span class="highlight-comment">// Provide a single trigger for when the button is clicked.</span>
        triggers = <span class="highlight-keyword">new</span> GraphableTransitionViewObjectTrigger[]
        {
            <span class="highlight-keyword">new</span> GraphableTransitionViewObjectTrigger(<span class="highlight-literal">"On Click"</span>)
        };
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAABABAAA");</script></div><h4 class="subHeading" id="AddToView">Add To View</h4><div class="subsection"><p>
              Finally, add the newly created graphable transition component to the relevant game object in your view. It will automatically configure its target and display name.
            </p><div class="mediaNear"><img alt="Graphable Button Component" src="../media/Graphable Button Component.png" /><div class="caption">A Graphable Button Component has been added to the view object.</div></div><p>
              The component will now be exposed in the graph editor.
            </p><div class="mediaNear"><img alt="On Click Exposed" src="../media/On Click Exposed.png" /><div class="caption">The button is exposed to the graph editor.</div></div></div></div></div></div><div id="pageFooter" class="pageFooter"><p>© 2019 Pelican 7 LTD. All rights reserved.</p></div><!-- Google Analytics -->
<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-57773606-5', 'auto');
ga('send', 'pageview');
</script>
<!-- End Google Analytics --></body></html>