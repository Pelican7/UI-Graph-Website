<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Graphs</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="824e6fef-eac9-4214-a9a1-6401321acde2" /><meta name="Description" content="Graphs enable you to build the flow of your user-interface in a visual, node-based editor. Create a graph to represent a single user-interface flow." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">UI Graph Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/da67a984-ce1f-4eba-b408-db4260a8bfa1.htm" title="UI Graph Documentation" tocid="roottoc">UI Graph Documentation</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/d6f9deb2-0be1-4787-9188-01d81be916a9.htm" title="Manual" tocid="d6f9deb2-0be1-4787-9188-01d81be916a9">Manual</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/0bc1dca5-7599-497f-880e-63c622949fef.htm" title="View Controllers" tocid="0bc1dca5-7599-497f-880e-63c622949fef">View Controllers</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/824e6fef-eac9-4214-a9a1-6401321acde2.htm" title="Graphs" tocid="824e6fef-eac9-4214-a9a1-6401321acde2">Graphs</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/a787bdae-cc7e-4621-b0c6-5275cb28b10b.htm" title="Transition Sequence Animator" tocid="a787bdae-cc7e-4621-b0c6-5275cb28b10b">Transition Sequence Animator</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/f3a32709-3893-456c-bacb-eefc866ae301.htm" title="Guides" tocid="1635d7d7-ad66-44be-b81e-c3e8440b7f29">Guides</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Help.png" /></td><td class="titleColumn"><h1>Graphs</h1></td></tr></table><span class="introStyle"></span> <div class="introduction"><p>Contents</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#Overview">Overview</a></li><li class="outlineSectionEntry"><a href="#Creation">Creation</a></li><li class="outlineSectionEntry"><a href="#GraphEditor">Graph Editor</a></li><li class="outlineSectionEntry"><a href="#AddingViewControllers">Adding View Controllers</a></li><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#InitialViewController">Initial View Controller</a></li></ul><li class="outlineSectionEntry"><a href="#GraphableViewObjects">Graphable View Objects</a></li><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#UICanvasWorkflow">UI Canvas Workflow</a></li><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#Embeds">Embeds</a></li></ul></ul><li class="outlineSectionEntry"><a href="#GraphableFields">Graphable Fields</a></li><li class="outlineSectionEntry"><a href="#ConnectingViewControllers">Connecting View Controllers</a></li><li class="outlineSectionEntry"><a href="#PresentingAGraph">Presenting A Graph</a></li><li class="outlineSectionEntry"><a href="#ManualTransitions">Manual Transitions</a></li></ul></div><div class="collapsibleAreaRegion" id="Overview"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Overview</span></div><div id="ID0RBSection" class="collapsibleSection"><p>
          Graphs enable you to build the flow of your user-interface in a visual, node-based editor. Create a graph to represent a single user-interface flow. Add view controllers to the graph and make connections between them to describe the transitions and relationships of your user-interface.
        </p><div class="mediaNear"><img alt="Graph - Chirp" src="../media/Graph - Chirp.png" /><div class="caption">The Chirp demo's user-interface is constructed using a graph.</div></div></div><div class="collapsibleAreaRegion" id="Creation"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Creation</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
          To create a graph, select <span class="input">Create/UI Graph/Graph</span> from the Unity menu. This will create a new graph asset at the selected location.
        </p></div><div class="collapsibleAreaRegion" id="GraphEditor"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Graph Editor</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
          Double-click a graph asset to open it in the <strong>Graph Editor</strong> window.
        </p><p>
          To pan the editor window, <span class="input">hold the middle-mouse button and drag</span> or <span class="input">hold the ALT key and drag</span>.
        </p><p><span class="input">Scroll</span> to zoom the editor window.
        </p></div><div class="collapsibleAreaRegion" id="AddingViewControllers"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Adding View Controllers</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
          To add a view controller to the graph, simply drag the view controller's asset file onto the editor window. Alternatively, right-click inside the editor window and select <span class="input">Add View Controller</span>. This will create a view controller node, which represents an instance of the view controller in the graph.
        </p><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
            A graph may contain many instances, or nodes, of the same view controller.
          </p></td></tr></table></div><h4 class="subHeading" id="InitialViewController">Initial View Controller</h4><div class="subsection"><p>
              The first view controller that is added to a graph will automatically become the graph's initial view controller. This is the view controller that will be presented first and is shown by a white arrow on the left of the node.
            </p><div class="mediaNear"><img alt="Graph - Initial" src="../media/Graph - Initial.png" /><div class="caption">The graph's initial view controller is shown by a white arrow on the left of the node.</div></div><p>
              The initial view controller can be changed by right-clicking on any view controller node and selecting <span class="input">Make Initial</span> from the menu.
            </p></div></div><div class="collapsibleAreaRegion" id="GraphableViewObjects"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Graphable View Objects</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
          Objects in a view controller's view can be made to be <span class="term">graphable</span>. When a view object is <span class="term">graphable</span> it is exposed in the graph editor, allowing connections to be made from it. For more information on graphable view objects, see the workflow-specific section below.
        </p><h4 class="subHeading" id="UICanvasWorkflow">UI Canvas Workflow</h4><div class="subsection"><p>
              In order to make a view object graphable, the relevant graphable component must be added to it. For example, a standard Unity UI Button can be made graphable by adding a <a href="4e16539a-79c4-ea7c-de4a-917eaa35d3e8.htm">GraphableButtonComponent</a> to it. This will expose a single <strong>On Click</strong> port in the editor.
            </p><div class="mediaNear"><img alt="Graph - Graphable Button" src="../media/Graph - Graphable Button.png" /><div class="caption">This view controller's view contains two buttons – 'Home Button' and 'Profile Button' – each with a GraphableButtonComponent, which exposes them in the graph editor.</div></div><p>
              By default, UI Graph provides graphable components for the following types.
            </p><div class="tableSection"><div class="caption">Graphable Transition Components</div><table><tr><td><p><a href="https://docs.unity3d.com/Manual/script-Button.html" target="_blank">UnityEngine.UI.Button</a></p></td><td><p><a href="4e16539a-79c4-ea7c-de4a-917eaa35d3e8.htm">GraphableButtonComponent</a></p></td></tr><tr><td><p><a href="https://docs.unity3d.com/Manual/script-Toggle.html" target="_blank">UnityEngine.UI.Toggle</a></p></td><td><p><a href="d8cbbac9-4f54-a3bb-9de7-400f5b5b41e6.htm">GraphableToggleComponent</a></p></td></tr></table></div><div class="tableSection"><div class="caption">Graphable Embed Components</div><table><tr><td><p><a href="https://docs.unity3d.com/Manual/class-RectTransform.html" target="_blank">UnityEngine.RectTransform</a></p></td><td><p><a href="2cd187e2-1371-b99b-56f2-80f282734b9e.htm">GraphableEmbedComponent</a></p></td></tr></table></div><p>
              To save time, UI Graph can add the relevant graphable components to all known types in a view for you. To do so, right-click on the view controller node and select <span class="input">Make All View Elements Graphable</span>. This will search its view for all known <em>Graphable Transition Components</em> listed above and add the relevant graphable component.
            </p><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
                Only <em>Graphable Transition Components</em> will be added via the above method.
              </p></td></tr></table></div><p>
              Custom graphable components can be created for any additional components not listed above in order to expose them in the graph editor. For example, the Chirp demo uses a custom graphable component to expose its <span class="code">List View</span> to the graph editor, offering a single <strong>On Item Selected</strong> port.
            </p><h4 class="subHeading" id="Embeds">Embeds</h4><div class="subsection"><p>
                  As listed above, UI Graph offers a third default graphable component, the <a href="2cd187e2-1371-b99b-56f2-80f282734b9e.htm">GraphableEmbedComponent</a>. This component can be added to any game object with a <span class="code">RectTransform</span> in your view controller's view to expose it to the editor. The <a href="2cd187e2-1371-b99b-56f2-80f282734b9e.htm">GraphableEmbedComponent</a> is used to embed a view controller as a child of the owning view controller, placing the child's view inside the component's <span class="code">RectTransform</span>. This allows you to embed child view controllers within a view controller without scripting a custom Container View Controller.
                </p><p>For example, the Assassin demo embeds a stack controller in the main menu screen using a <a href="2cd187e2-1371-b99b-56f2-80f282734b9e.htm">GraphableEmbedComponent</a></p><div class="mediaNear"><img alt="Graph - Embed" src="../media/Graph - Embed.png" /><div class="caption">The main menu embeds a stack view controller using a GraphableEmbedComponent. A GraphableEmbedComponent was placed on the "User Profile Stack Container" game object in the main menu's view to expose it to the graph editor.</div></div></div></div></div><div class="collapsibleAreaRegion" id="GraphableFields"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Graphable Fields</span></div><div id="ID5RBSection" class="collapsibleSection"><p>
          Container View Controllers may expose <span class="term">graphable</span> fields, allowing them to be configured in the graph editor. Upon instantiation from the graph, a view controller's graphable fields will be initialized with the relevant view controllers configured in the graph editor.
        </p><p>
          The standard container view controllers all expose fields to the graph editor. For example, a navigation controller exposes its root view controller to the editor, allowing it to be configured from the graph.
        </p><div class="mediaNear"><img alt="Graph - Field" src="../media/Graph - Field.png" /><div class="caption">A navigation controller exposes its root view controller field in the graph editor.</div></div></div><div class="collapsibleAreaRegion" id="ConnectingViewControllers"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Connecting View Controllers</span></div><div id="ID6RBSection" class="collapsibleSection"><p>
          Nodes can be connected to one another using the aforementioned <a href="#GraphableViewObjects">View Objects</a> and <a href="#GraphableFields">Fields</a>, as well as via <a href="#ManualTransitions">Manual Transitions</a>. This is how the flow and structure of your user-interface is modelled, determining the transitions and relationships between your view controllers.
        </p><p>
          To connect an exposed port to a view controller, <span class="input">click and drag</span> from the port's connector to the desired view controller node.
        </p><div class="mediaNear"><img alt="Graph - Connect" src="../media/Graph - Connect.png" /><div class="caption">Connect a port by clicking and dragging from the port's connector to the desired view controller node.</div></div><p>
          When connecting <strong>Transition View Objects</strong>, such as UI Buttons, a list of available view controller transitions will be offered upon connection. This list is automatically constructed and filtered by <strong>UI Graph</strong> to include only relevant and legal transitions.
        </p><p>
          When connecting two unconnected nodes, the source view controller as well as its parent hierarchy will be queried for transitions. This is synonymous with the runtime functionality of <span class="nolink">InvokeTransition(ViewControllerTransitionIdentifier, T, bool, Action)</span>, which allows child view controllers to invoke transitions in their parent view controllers. For example, in the graph below a tab bar has a child navigation controller, which in turn has a child view controller, <strong>HomeCanvasController</strong> .
        </p><div class="mediaNear"><img alt="Graph - Transitions Pt 1" src="../media/Graph - Transitions Pt1.png" /></div><p>
          Upon connecting <strong>HomeCanvasController</strong> to the unconnected <strong>SettingsCanvasController</strong>, UI Graph will offer transitions from the source nodes' full parent hierarchy, like so:
        </p><div class="mediaNear"><img alt="Graph - Transitions Pt 2" src="../media/Graph - Transitions Pt 2.png" /></div><p>
          This allows the <strong>HomeCanvasController</strong> to perform a <strong>Present</strong> (View Controller), <strong>Push</strong> (Navigation Controller), or <strong>SetSelected</strong> (Tab Bar Controller) transition to the settings view controller.
        </p><p>
          Once a view object port is connected, the selected transition will be displayed along with its current settings, as shown below.
        </p><div class="mediaNear"><img alt="Graph - Connected" src="../media/Graph - Connected.png" /><div class="caption">The HomeCanvasController will invoke a Push transition in its parent navigation controller to push the SettingsCanvasController on-screen when its Settings Button is pressed.</div></div><p>
          Connecting in the reverse direction, from Settings to Home, will offer the appropriate dismissal transition, in this case a 'PopTo' transition.
        </p><div class="mediaNear"><img alt="Graph - Connected Two Ways" src="../media/Graph - Connected Two Ways.png" /><div class="caption">The SettingsCanvasController will invoke a PopTo transition in its parent navigation controller when the manual 'PopToHome' transition is invoked.</div></div><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
            The navigation controller provides a back button by default, which will pop to the previous view controller when pressed. This means you only need to create PopTo transitions where the back button won't suffice.
          </p></td></tr></table></div></div><div class="collapsibleAreaRegion" id="PresentingAGraph"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Presenting A Graph</span></div><div id="ID7RBSection" class="collapsibleSection"><p>
          To present a graph, open the <span class="input">Options</span> menu in the top-right of the graph editor window and select <span class="input">Add Graph To Current Scene</span>. This will create a UI window in your current scene, as well as a graph presenter component, which will perform the necessary steps of instantiating the graph's initial view controller and making it the window's root view controller. Hit play and your graph will be presented in the window.
        </p></div><div class="collapsibleAreaRegion" id="ManualTransitions"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID9RB')" onkeypress="SectionExpandCollapse_CheckKey('ID9RB', event)" tabindex="0"><img id="ID9RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Manual Transitions</span></div><div id="ID9RBSection" class="collapsibleSection"><p>
          Manual transitions allow you to create a transition between two view controllers without the presence of a view object. This is useful if you want to invoke a transition from a non-view source, such as a network event or key press.
        </p><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
            You could also create a custom graphable component to expose a view object port for either of these scenarios instead of using a manual transition, if you wish.
          </p></td></tr></table></div><p>
          To invoke a manual transition, first give it an identifier by entering a value in the transition's <strong>User Identifier</strong> field. Then from your canvas controller, invoke the transition with <span class="nolink">PerformGraphTransitionWithIdentifier(string, object)</span> when appropriate. For example, below we perform the 'Dismiss Login' transition upon a successful login.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID8EABABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID8EABABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID8EABABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID8EABABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> HomeCanvasController : CanvasController
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> OnLoginCompletedSuccessfully()
    {
        PerformGraphTransitionWithIdentifier(<span class="highlight-literal">"Dismiss Login"</span>, <span class="highlight-keyword">this</span>);
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID8EABABAAA");</script><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
            Any transition can be given a user identifier, meaning view object transitions can also be invoked from code in this way too.
          </p></td></tr></table></div></div></div></div><div id="pageFooter" class="pageFooter"><p>© 2019 Pelican 7 LTD. All rights reserved.</p></div><!-- Google Analytics -->
<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-57773606-5', 'auto');
ga('send', 'pageview');
</script>
<!-- End Google Analytics --></body></html>